function InnerSurface_frhs3d = matEvaluate3dSideSurfaceTerm( obj, edge, fphys3d )
%> @brief Function used to calculate contribution to the right hand side from the vertical side edge integration
%> 
%> More detailed description.
%>
%> @param InnerEdge The inner edge object
%> @param fphys3d The three dimensional physical field
%>
%> @retval InnerSurface_frhs3d The contribution to the right hand side from the inner edge integration

[ fm, fp ] = edge.matEvaluateSurfValue( fphys3d );
%> $(hu^2+\frac{1}{2}g(H^2 - h^2) )* nx + huv * ny + u\omega * nz$
FluxM(:, :, 1) = ( fm(:,:,1).^2./fm(:,:,6)  + 1/2 * obj.gra * ( fm(:,:,6).^2 - obj.H0^2 ) ) .* edge.nx +...
      ( fm(:,:,1) .* fm(:,:,2) ./ fm(:,:,6) ) .* edge.ny; 
%> $(hu^2+\frac{1}{2}g(H^2 - h^2) )* nx + huv * ny + u\omega * nz$
FluxP(:, :, 1) = ( fp(:,:,1).^2./fp(:,:,6) + 1/2 * obj.gra * ( fp(:,:,6).^2 - obj.H0^2 )) .* edge.nx +...
      ( fp(:,:,1) .* fp(:,:,2) ./ fp(:,:,6) ) .* edge.ny; 
%> $huv * nx + ( hv^2+\frac{1}{2}g(H^2 - h^2) ) * ny + v\omega * nz$
FluxM(:, :, 2) = ( fm(:,:,1) .* fm(:,:,2) ./ fm(:,:,6) ) .* edge.nx +... 
    ( fm(:,:,2).^2./fm(:,:,6) + 1/2 * obj.gra * ( fm(:,:,6).^2 - obj.H0^2 ) ) .* edge.ny; 
%> $huv * nx + ( hv^2+\frac{1}{2}g(H^2 - h^2) ) * ny + v\omega * nz$
FluxP(:, :, 2) = ( fp(:,:,1) .* fp(:,:,2) ./ fp(:,:,6) ) .* edge.nx +... 
    ( fp(:,:,2).^2./fp(:,:,6) + 1/2 * obj.gra * ( fp(:,:,6).^2 - obj.H0^2 ) ) .* edge.ny; 

%> $\lambda = abs( max( u*nx + v*ny + \frac{\omega}{H}*nz, ( u+\sqrt(gH) )*nx + ( v+\sqrt(gH) )*ny + \frac{\omega}{H}*nz,( u-\sqrt(gH) )*nx + ( v-\sqrt(gH) )*ny + \frac{\omega}{H}*nz )  )$
lambda = abs( max( vertcat (max ( max ( fm(:, :, 1) ./ fm(:, :, 6) .* edge.nx +  fm(:, :, 2) ./ fm(:, :, 6) .* edge.ny ,...
    - fp(:, :, 1) ./ fp(:, :, 6) .* edge.nx -  fp(:, :, 2) ./ fp(:, :, 6) .* edge.ny )), ...
    max( max (( fm(:, :, 1) ./ fm(:, :, 6) + sqrt(obj.gra* fm(:, :, 6))) .* edge.nx...
      + ( fm(:, :, 2) ./ fm(:, :, 6) + sqrt(obj.gra* fm(:, :, 6))) .* edge.ny ,...
   ( -fp(:, :, 1) ./ fp(:, :, 6) - sqrt(obj.gra* fp(:, :, 6))) .* edge.nx...
      + ( -fp(:, :, 2) ./ fp(:, :, 6) - sqrt(obj.gra* fp(:, :, 6))) .* edge.ny )),...
  max( max (( fm(:, :, 1) ./ fm(:, :, 6) - sqrt(obj.gra* fm(:, :, 6))) .* edge.nx...
      + ( fm(:, :, 2) ./ fm(:, :, 6) - sqrt(obj.gra* fm(:, :, 6))) .* edge.ny,...
   ( -fp(:, :, 1) ./ fp(:, :, 6) +  sqrt(obj.gra* fp(:, :, 6))) .* edge.nx...
      + ( -fp(:, :, 2) ./ fp(:, :, 6) + sqrt(obj.gra* fp(:, :, 6))) .* edge.ny)))));

%> $\mathbf n\cdot\mathbf {F^*} = \mathbf n\cdot\frac{\mathbf{F^{(+)}}+\mathbf{F^{(-)}}}{2} - \frac{\lambda}{2}(\bold U^+ - \bold U^-)$
FluxS(:, :, 1) = 0.5 .* ( FluxM(:, :, 1) + FluxP(:, :, 1) - ...
    bsxfun( @times, lambda , ( fp( :, :, 1 ) - fm( :, :, 1 ) ) ) );
FluxS(:, :, 2) = 0.5 .* ( FluxM(:, :, 2) + FluxP(:, :, 2) - ...
    bsxfun( @times, lambda , ( fp( :, :, 2 ) - fm( :, :, 2 ) ) ) );

InnerSurface_frhs3d = edge.matEvaluateStrongFromEdgeRHS( FluxM, FluxP, FluxS );

end