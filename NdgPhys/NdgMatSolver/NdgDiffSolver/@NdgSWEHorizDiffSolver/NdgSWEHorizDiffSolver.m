classdef NdgSWEHorizDiffSolver < NdgHorizDiffSolver
    %NDGSWEHORIZDIFFSOLVER 此处显示有关此类的摘要
    %   此处显示详细说明
    
    properties
        %the struct version of inner edge contained in mesh union
        InnerEdge
        %the struct version of boundary edge contained in mesh union        
        BoundaryEdge
        
        mesh
        
        cell
    end
    
    methods
        
        function obj = NdgSWEHorizDiffSolver( physClass )
            obj = obj@NdgHorizDiffSolver( physClass );
            warning('off');
            obj.InnerEdge = struct(physClass.meshUnion.InnerEdge);
            obj.BoundaryEdge = struct(physClass.meshUnion.BoundaryEdge);
            obj.mesh = struct(physClass.meshUnion);
            obj.cell = struct(physClass.meshUnion.cell);
            warning('on');
            clear mxEvaluateHorizontalDiffRHS;
        end
        
        function matEvaluateDiffRHS(obj, physClass, fphys)
%             [ VX, VY ] = HorizontalDiffusionTest(physClass.hcrit, int8(physClass.meshUnion.type),...
%               obj.Prantl, obj.InnerEdge, obj.BoundaryEdge, obj.nv, physClass.frhs{1}, fphys,  physClass.varFieldIndex,...
%               obj.cell, obj.mesh, physClass.BoundaryEdgefp{1});
% % tic;
            physClass.frhs{1} = mxEvaluateHorizontalDiffRHS(physClass.hcrit, int8(physClass.meshUnion.type),...
              obj.Prantl, obj.InnerEdge, obj.BoundaryEdge, obj.nv, physClass.frhs{1}, fphys,  physClass.varFieldIndex,...
              obj.cell, obj.mesh, int8(physClass.meshUnion.BoundaryEdge.ftype), physClass.gra, physClass.fext3d{1});
% %           t1 = toc;
%             [tempfrhs{1}] = mxEvaluateHorizontalDiffRHS(physClass.hcrit, int8(physClass.meshUnion.type),...
%               obj.Prantl, obj.InnerEdge.Ne, obj.InnerEdge.Nfp, obj.InnerEdge.M, obj.InnerEdge.Js, obj.InnerEdge.nx, ...
%               obj.InnerEdge.ny, obj.InnerEdge.LAV, obj.InnerEdge.FToE, obj.InnerEdge.FToN1, obj.InnerEdge.FToN2, ...
%               obj.BoundaryEdge.Ne, obj.BoundaryEdge.Nfp, obj.BoundaryEdge.M, obj.BoundaryEdge.Js, obj.BoundaryEdge.nx,...
%               obj.BoundaryEdge.ny, obj.BoundaryEdge.LAV, obj.BoundaryEdge.FToE, obj.BoundaryEdge.FToN1, obj.nv, physClass.frhs{1},...
%               fphys, physClass.varFieldIndex, physClass.meshUnion.cell.Dr, physClass.meshUnion.cell.Ds, physClass.meshUnion.cell.Nface,...
%               physClass.meshUnion.cell.invM, physClass.meshUnion.rx, physClass.meshUnion.sx, physClass.meshUnion.ry, physClass.meshUnion.sy,...
%               physClass.meshUnion.J, physClass.meshUnion.LAV, physClass.BoundaryEdgefp{1}, physClass.meshUnion.cell.N, physClass.meshUnion.cell.Nz);
% %             tic;
% %             obj.matUpdateViscosity(physClass, fphys(:,:,1), fphys(:,:,2), fphys(:,:,4));
% %             obj.matUpdatePenaltyParameter( physClass, fphys(:,:,4) );
% %             %> $\Kappa = \nv * H$
% %             Kappa = obj.nv .* fphys(:,:,4);
% %             for i = 1:2
% %                 obj.matCalculateAuxialaryVariable( physClass, fphys(:,:,physClass.varFieldIndex(i))./fphys(:,:,4), Kappa, i, ...
% %                     physClass.InnerEdgefm{1}(:,:,physClass.varFieldIndex(i))./physClass.InnerEdgefm{1}(:,:,4),...
% %                     physClass.InnerEdgefp{1}(:,:,physClass.varFieldIndex(i))./physClass.InnerEdgefp{1}(:,:,4), ...
% %                     physClass.BoundaryEdgefm{1}(:,:,physClass.varFieldIndex(i))./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                     physClass.BoundaryEdgefp{1}(:,:,physClass.varFieldIndex(i))./physClass.BoundaryEdgefp{1}(:,:,4));
% % %                 disp(physClass.InnerEdgefp{1}(:,:,physClass.varFieldIndex(i))./physClass.InnerEdgefp{1}(:,:,4));
% %             end
% %             
% %             for i = 3:physClass.Nvar
% %                 obj.matCalculateAuxialaryVariable( physClass, fphys(:,:,physClass.varFieldIndex(i))./fphys(:,:,4), Kappa./obj.Prantl, i, ...
% %                     physClass.InnerEdgefm{1}(:,:,physClass.varFieldIndex(i))./physClass.InnerEdgefm{1}(:,:,4),...
% %                     physClass.InnerEdgefp{1}(:,:,physClass.varFieldIndex(i))./physClass.InnerEdgefp{1}(:,:,4), ...
% %                     physClass.BoundaryEdgefm{1}(:,:,physClass.varFieldIndex(i))./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                     physClass.BoundaryEdgefp{1}(:,:,physClass.varFieldIndex(i))./physClass.BoundaryEdgefp{1}(:,:,4));
% %             end
%             %> this part is used to calculate $\frac{\partial}{\partial x}(2\nv_h H\frac{\partial u}{\partial x})
%             %> + \frac{\partial}{\partial y}(\nv H(\frac{\partial u}{\partial y} + \frac{\partial v}{\partial x}))$
%             physClass.frhs{1}(:,:,1) = physClass.frhs{1}(:,:,1) + 2 * obj.matCalculatePartDerivTermX( physClass, obj.px(:,:,1),...
%                 Kappa, fphys(:,:,1)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,1)./physClass.InnerEdgefm{1}(:,:,4), ...
%                 physClass.InnerEdgefp{1}(:,:,1)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,1)./physClass.BoundaryEdgefm{1}(:,:,4),...
%                 physClass.BoundaryEdgefp{1}(:,:,1)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
%                 obj.matCalculatePartDerivTermY( physClass, obj.py(:,:,1),...
%                 Kappa, fphys(:,:,1)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,1)./physClass.InnerEdgefm{1}(:,:,4), ...
%                 physClass.InnerEdgefp{1}(:,:,1)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,1)./physClass.BoundaryEdgefm{1}(:,:,4),...
%                 physClass.BoundaryEdgefp{1}(:,:,1)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
%                 obj.matCalculatePartDerivTermY( physClass, obj.px(:,:,2), Kappa, fphys(:,:,2)./fphys(:,:,4), 1,...
%                 physClass.InnerEdgefm{1}(:,:,2)./physClass.InnerEdgefm{1}(:,:,4), ...
%                 physClass.InnerEdgefp{1}(:,:,2)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,2)./physClass.BoundaryEdgefm{1}(:,:,4),...
%                 physClass.BoundaryEdgefp{1}(:,:,2)./physClass.BoundaryEdgefp{1}(:,:,4) );
%             
%             %> this part is used to calculate $\frac{\partial}{\partial x}(\nv H(\frac{\partial u}{\partial y} + \frac{\partial v}{\partial x}))+
%             %> \frac{\partial}{\partial y}(2\nv_h H\frac{\partial v}{\partial y} $
%             physClass.frhs{1}(:,:,2) = physClass.frhs{1}(:,:,2) +  ...
%                 obj.matCalculatePartDerivTermX( physClass, obj.py(:,:,1),Kappa, fphys(:,:,1)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,1)./physClass.InnerEdgefm{1}(:,:,4), ...
%                 physClass.InnerEdgefp{1}(:,:,1)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,1)./physClass.BoundaryEdgefm{1}(:,:,4),...
%                 physClass.BoundaryEdgefp{1}(:,:,1)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
%                 obj.matCalculatePartDerivTermX( physClass, obj.px(:,:,2),...
%                 Kappa, fphys(:,:,2)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,2)./physClass.InnerEdgefm{1}(:,:,4), ...
%                 physClass.InnerEdgefp{1}(:,:,2)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,2)./physClass.BoundaryEdgefm{1}(:,:,4),...
%                 physClass.BoundaryEdgefp{1}(:,:,2)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
%                 2 * obj.matCalculatePartDerivTermY( physClass, obj.py(:,:,2),...
%                 Kappa, fphys(:,:,2)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,2)./physClass.InnerEdgefm{1}(:,:,4), ...
%                 physClass.InnerEdgefp{1}(:,:,2)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,2)./physClass.BoundaryEdgefm{1}(:,:,4),...
%                 physClass.BoundaryEdgefp{1}(:,:,2)./physClass.BoundaryEdgefp{1}(:,:,4) );
            

            
            
% %             physClass.frhs{1}(:,:,1) = physClass.frhs{1}(:,:,1) + 2 * obj.matCalculatePartDerivTermX( physClass, obj.px(:,:,1),...
% %                 Kappa, fphys(:,:,1)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,1)./physClass.InnerEdgefm{1}(:,:,4), ...
% %                 physClass.InnerEdgefp{1}(:,:,1)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,1)./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                 physClass.BoundaryEdgefp{1}(:,:,1)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
% %                 obj.matCalculatePartDerivTermY( physClass, obj.py(:,:,1),...
% %                 Kappa, fphys(:,:,1)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,1)./physClass.InnerEdgefm{1}(:,:,4), ...
% %                 physClass.InnerEdgefp{1}(:,:,1)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,1)./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                 physClass.BoundaryEdgefp{1}(:,:,1)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
% %                 obj.matCalculateMixedPartDerivTermY( physClass, obj.px(:,:,2),...
% %                 Kappa, fphys(:,:,2)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,2)./physClass.InnerEdgefm{1}(:,:,4), ...
% %                 physClass.InnerEdgefp{1}(:,:,2)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,2)./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                 physClass.BoundaryEdgefp{1}(:,:,2)./physClass.BoundaryEdgefp{1}(:,:,4) );
% %             
% %             %> this part is used to calculate $\frac{\partial}{\partial x}(\nv H(\frac{\partial u}{\partial y} + \frac{\partial v}{\partial x}))+
% %             %> \frac{\partial}{\partial y}(2\nv_h H\frac{\partial v}{\partial y} $
% %             physClass.frhs{1}(:,:,2) = physClass.frhs{1}(:,:,2) +  ...
% %                 obj.matCalculateMixedPartDerivTermX( physClass, obj.py(:,:,1),Kappa, fphys(:,:,1)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,1)./physClass.InnerEdgefm{1}(:,:,4), ...
% %                 physClass.InnerEdgefp{1}(:,:,1)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,1)./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                 physClass.BoundaryEdgefp{1}(:,:,1)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
% %                 obj.matCalculatePartDerivTermX( physClass, obj.px(:,:,2),...
% %                 Kappa, fphys(:,:,2)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,2)./physClass.InnerEdgefm{1}(:,:,4), ...
% %                 physClass.InnerEdgefp{1}(:,:,2)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,2)./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                 physClass.BoundaryEdgefp{1}(:,:,2)./physClass.BoundaryEdgefp{1}(:,:,4) ) + ...
% %                 2 * obj.matCalculatePartDerivTermY( physClass, obj.py(:,:,2),...
% %                 Kappa, fphys(:,:,2)./fphys(:,:,4), 1, physClass.InnerEdgefm{1}(:,:,2)./physClass.InnerEdgefm{1}(:,:,4), ...
% %                 physClass.InnerEdgefp{1}(:,:,2)./physClass.InnerEdgefp{1}(:,:,4), physClass.BoundaryEdgefm{1}(:,:,2)./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                 physClass.BoundaryEdgefp{1}(:,:,2)./physClass.BoundaryEdgefp{1}(:,:,4) );            
% %             
% %             
% %             
% %             
% %             
% %             for i = 3:physClass.Nvar
% %                 physClass.frhs{1}(:,:,i) = physClass.frhs{1}(:,:,i) + obj.matCalculatePartDerivTermX( physClass, obj.px(:,:,i),...
% %                     Kappa./obj.Prantl, fphys(:,:,physClass.varFiledIndex(i))./fphys(:,:,4), obj.Prantl, ...
% %                     physClass.InnerEdgefm{1}(:,:,physClass.varFiledIndex(i))./physClass.InnerEdgefm{1}(:,:,4), ...
% %                     physClass.InnerEdgefp{1}(:,:,physClass.varFiledIndex(i))./physClass.InnerEdgefp{1}(:,:,4),...
% %                     physClass.BoundaryEdgefm{1}(:,:,physClass.varFiledIndex(i))./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                     physClass.BoundaryEdgefp{1}(:,:,physClass.varFiledIndex(i))./physClass.BoundaryEdgefp{1}(:,:,4) )+ ...
% %                     obj.matCalculatePartDerivTermY( physClass, obj.py(:,:,i),...
% %                     Kappa./obj.Prantl, fphys(:,:,physClass.varFiledIndex(i))./fphys(:,:,4), obj.Prantl, ...
% %                     physClass.InnerEdgefm{1}(:,:,physClass.varFiledIndex(i))./physClass.InnerEdgefm{1}(:,:,4), ...
% %                     physClass.InnerEdgefp{1}(:,:,physClass.varFiledIndex(i))./physClass.InnerEdgefp{1}(:,:,4),...
% %                     physClass.BoundaryEdgefm{1}(:,:,physClass.varFiledIndex(i))./physClass.BoundaryEdgefm{1}(:,:,4),...
% %                     physClass.BoundaryEdgefp{1}(:,:,physClass.varFiledIndex(i))./physClass.BoundaryEdgefp{1}(:,:,4) );
% %             end
% %             t2 = toc;
% %             fprintf("The speed ratio is:%f\n",t2/t1);
        end
    end
    
    methods( Access = protected )
        function matUpdatePenaltyParameter( obj, physClass, Height )
            %> this penalty parameter is calculated as $\tau=\frac{(D_p+1)(D_p+d)}{d}\frac{n_0}{2}\frac{A}{V}\miu$
            [ HnvM, HnvP ] = obj.matEvaluateSurfValue(physClass.meshUnion(1).InnerEdge, obj.nv .* Height);
            
            InnerEdgeA_fm = repmat( (physClass.mesh2d(1).InnerEdge.LAV./physClass.mesh2d(1).LAV(physClass.mesh2d(1).InnerEdge.FToE(1,:)))', 1, physClass.meshUnion(1).Nz );
            InnerEdgeA_fp = repmat( (physClass.mesh2d(1).InnerEdge.LAV./physClass.mesh2d(1).LAV(physClass.mesh2d(1).InnerEdge.FToE(2,:)))', 1, physClass.meshUnion(1).Nz );
            InnerEdgeTau_fm = bsxfun(@times,  ( InnerEdgeA_fm(:) )',...
                ( physClass.meshUnion(1).cell.N + 1 )*(physClass.meshUnion(1).cell.N + ...
                double(physClass.meshUnion(1).type) )/double(physClass.meshUnion(1).type) * physClass.meshUnion(1).cell.Nface/2 .* HnvM);
            InnerEdgeTau_fp = bsxfun(@times,  ( InnerEdgeA_fp(:) )',...
                ( physClass.meshUnion(1).cell.N + 1 )*(physClass.meshUnion(1).cell.N + ...
                double(physClass.meshUnion(1).type) )/double(physClass.meshUnion(1).type) * physClass.meshUnion(1).cell.Nface/2 .* HnvP);
            obj.InnerEdgeTau = max( InnerEdgeTau_fm, InnerEdgeTau_fp );
            
            BoundaryEdgeA_fm = repmat( (physClass.mesh2d(1).BoundaryEdge.LAV./physClass.mesh2d(1).LAV(physClass.mesh2d(1).BoundaryEdge.FToE(1,:)))', 1, physClass.meshUnion(1).Nz );
            [ Hnv, ~ ] = obj.matEvaluateSurfValue(physClass.meshUnion(1).BoundaryEdge, obj.nv .* Height);
            obj.BoundaryEdgeTau = bsxfun(@times, ( BoundaryEdgeA_fm(:) )', ...
                ( physClass.meshUnion(1).cell.N + 1 )*( physClass.meshUnion(1).cell.N + ...
                double(physClass.meshUnion(1).type) )./double(physClass.meshUnion(1).type) * physClass.meshUnion(1).cell.Nface/2 .* Hnv);
        end
    end
    
end

